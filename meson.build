project('fghj', 'd', version : '0.5.5', license: 'BSL-1.0')

description = 'Mir FGHJ - JSON Parsing and Serialization'

subprojects = ['mir-core', 'mir-algorithm']

has_cpp_headers = false

sources_list = [
    'fghj/fghj',
    'fghj/jsonbuffer',
    'fghj/jsonparser',
    'fghj/outputarray',
    'fghj/package',
    'fghj/serialization',
    'fghj/transform',
    'fghj/utility',
]

sources = []
foreach s : sources_list
    sources += 'source/' + s + '.d'
endforeach

add_project_arguments([
    '-preview=dip1008',
    '-lowmem',
], language: 'd')

required_deps = []

foreach p : subprojects 
    required_deps += dependency(p, fallback : [p, p.underscorify() + '_dep'])
endforeach

directories = ['source']

if has_cpp_headers
    directories += 'include'
endif

directories = include_directories(directories)

this_lib = library(meson.project_name(),
    sources,
    include_directories: directories,
    install: true,
    version: meson.project_version(),
    dependencies: required_deps,
)

this_dep = declare_dependency(
    link_with: [this_lib],
    include_directories: directories,
    dependencies: required_deps,
)

test_versions = []

if has_cpp_headers
    install_subdir('include/',
        strip_directory :true,
        install_dir: 'include/',
    )
endif

install_subdir('source/',
    strip_directory : true,
    install_dir: 'include/d/' + meson.project_name(),
)

# import('pkgconfig').generate(this_lib,
#     description: description,
#     subdirs: 'd/' + meson.project_name(),
# )

fghj_dep = this_dep
fghj_lib = this_lib

test_subdirs = []

if get_option('with_test_explicit')

    test_exe = executable(meson.project_name() + '-tset',
        sources,
        include_directories: directories,
        d_unittest: true,
        d_module_versions: test_versions,
        link_args: '-main',
        dependencies: required_deps,
    )

    test(meson.project_name() + '-test', test_exe)

    foreach dir : test_subdirs
        subdir(dir)
    endforeach
endif
